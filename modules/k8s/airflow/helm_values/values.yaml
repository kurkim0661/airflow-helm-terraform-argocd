# Helm common value https://github.com/airflow-helm/charts/blob/main/charts/airflow/values.yaml

serviceAccount:
  create: true
  name: airflow
  annotation: {}


###################################
## CONFIG | Kubernetes Ingress
###################################
ingress:
  ## if we should deploy Ingress resources
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/kubernetes/ingress.md
  enabled: false

# ingress:
#   enabled: true
#   web:
#     annotations:
#       nginx.ingress.kubernetes.io/force-ssl-redirect: 'true'

dags:
  gitSync:
    enabled: true
    repo: "git@github.com:kurkim0661/airflow-dags.git"
    subPath: "dags"
    rev: HEAD
    branch: "v2-2-stable"
    depth: 1
    sshKeySecret: airflow-ssh-secret
    resources:
      limits:
        cpu: "50m"
        memory: "128Mi"
      requests:
        cpu: "10m"
        memory: "50Mi"

extraSecrets:
  airflow-ssh-secret:
    data: |
      gitSshKey: 'LS0tLS1CRUdJTiBPUEVOU1NIIFBSSVZBVEUgS0VZLS0tLS0KYjNCbGJuTnphQzFyWlhrdGRqRUFBQUFBQkc1dmJtVUFBQUFFYm05dVpRQUFBQUFBQUFBQkFBQUNGd0FBQUFkemMyZ3RjbgpOaEFBQUFBd0VBQVFBQUFnRUF1TnoxR3hrTWxDbDhhQWEwV1A4OEV0MGcyWi9NQlpaNis5UXB5RkRFR0hWanlhZHo0Vk9NCk1tNzNQQ3BPalJmVHF5VkdEZEptczluRUxQckQ1cTk5ZmZlNjNLeHhzVlpNRktvdGVEbTJzM0ZiZStWdmJVUXl2SmFvaC8KUlNuY0hKQ2Rhc3RVZ1dKRmgvdlBOYUhPYzVlZmpvNXBtZVlYbURLRTMzbW5xMnlaa1RCdzNhRit6Q0ZCU05FbGhrckJRbwpLS0xzalBsOFByT1Mzdjk1OVcyc3plNG5MU2M3T3BWSFc5RFBvL01qUFZaRFJKbkx4TU80am5saktvOCsrcHhQbkVlanBECmw2SkhCU3FJRHdjeWswa1FEUHlqQmVEMWVKTXErcnBPYTBMRVBDQ0RxSERoUWs2NDVBdzBsU294Q2V3UVc3RFY3ZmViemYKWUJUTFFVeWdmK0JjMEFCREI5Q0lZTHU0Y0VIK3JiNnRkVk4rOFF2WVNodVRaa3RTQVJvdHRncUN0WU5uc291eDlXWkQ4RApZMkpNOExCdkJCa0pnd1dUNHlMVkhpT2tRV1VlTWllT1czZ1hlcDNBSkVwWnhtN0JZcGJ3WnBscHF4R1lUeUIwWi96WmxQClBrdFNpd1hzZHVpVFBWaVZnRkpmRy81azJHYzlkWDdheTUvMUdlNWhrQ3g3Z0oyT1l6Y29VbUpLNjd3cGFCK3FFbyt6TTMKSllCUDc3bjQxK1FQSWRTaHVsLzNhdWNHMTBuOEdMekQvYXQ5Vlc3VkRKQ0RtQUExaSs3cEdqM3FUa01IMng4UnBrR0xHMQpHNE96UW9iTExmMGZoVWhLTWkxUGQ2UU81WUtGallDMGNCVFpMKy9qeERYWFYxYk9SYkRTZ2M2Y2pOK1dMUTIxcHZRU2FNCk1BQUFkUWtmTWd3NUh6SU1NQUFBQUhjM05vTFhKellRQUFBZ0VBdU56MUd4a01sQ2w4YUFhMFdQODhFdDBnMlovTUJaWjYKKzlRcHlGREVHSFZqeWFkejRWT01NbTczUENwT2pSZlRxeVZHRGRKbXM5bkVMUHJENXE5OWZmZTYzS3h4c1ZaTUZLb3RlRAptMnMzRmJlK1Z2YlVReXZKYW9oL1JTbmNISkNkYXN0VWdXSkZoL3ZQTmFIT2M1ZWZqbzVwbWVZWG1ES0UzM21ucTJ5WmtUCkJ3M2FGK3pDRkJTTkVsaGtyQlFvS0tMc2pQbDhQck9TM3Y5NTlXMnN6ZTRuTFNjN09wVkhXOURQby9NalBWWkRSSm5MeE0KTzRqbmxqS284KytweFBuRWVqcERsNkpIQlNxSUR3Y3lrMGtRRFB5akJlRDFlSk1xK3JwT2EwTEVQQ0NEcUhEaFFrNjQ1QQp3MGxTb3hDZXdRVzdEVjdmZWJ6ZllCVExRVXlnZitCYzBBQkRCOUNJWUx1NGNFSCtyYjZ0ZFZOKzhRdllTaHVUWmt0U0FSCm90dGdxQ3RZTm5zb3V4OVdaRDhEWTJKTThMQnZCQmtKZ3dXVDR5TFZIaU9rUVdVZU1pZU9XM2dYZXAzQUpFcFp4bTdCWXAKYndacGxwcXhHWVR5QjBaL3pabFBQa3RTaXdYc2R1aVRQVmlWZ0ZKZkcvNWsyR2M5ZFg3YXk1LzFHZTVoa0N4N2dKMk9Zegpjb1VtSks2N3dwYUIrcUVvK3pNM0pZQlA3N240MStRUElkU2h1bC8zYXVjRzEwbjhHTHpEL2F0OVZXN1ZESkNEbUFBMWkrCjdwR2ozcVRrTUgyeDhScGtHTEcxRzRPelFvYkxMZjBmaFVoS01pMVBkNlFPNVlLRmpZQzBjQlRaTCsvanhEWFhWMWJPUmIKRFNnYzZjak4rV0xRMjFwdlFTYU1NQUFBQURBUUFCQUFBQ0FERy8zUUtXNGlpNVpXNkZaMkdRQnJXNDVzOUtUdGl1SDVqSQpCeHFPaWNkZlNDU0x1UWJKdWpBVVp0cTlNL2lLa2Y4Ny83ZFdpU2Nia3N6Y0MzNTRlZGc5by84aE5WT1pPczVRNGYyNTRtCjQyTW4yTVNFbHFraERvcHFBMzQwZnJUOVFpL3NXbWliYnNUaXdtZlhqTHpVOEM2b0tza3MvK3FJcGZPU1JNcEFacStKRHMKYkdZRjVGRU5HczMyRmRtdGJ3VkltMHB4RmJ1MkRlK1BaMTNpVHgvNFdIaXhWeUl6N0VsTVQ2VDZtT0EzNTlCOVp6WWp5ZgpZbHVzZElWNVdRSFdpY2F2Q1dPMFcxS0xtS1FhdHNTbVkvaHF3T0NqSXN4NUpwYmxMcGQxRjJSckI2TjhCVk1YNW5BUXpOCkhiMGVpdXE5UlJLYkZwOG5jaUhrVnJMVEVWb0Rod2VUUmg1QU1sVW02M0JtUnpKM2ZjWTdieXlpM2F1Nmk2dGNvbnEzbmUKd2RFcmg2L2RhS3hKc0ZPQ2trbmJoUVloNWVHOEJqY21QTWhVV1pyaS84L3UrdkhMZzAvem9LSXNQMVoySjNMUVdqa3lIYQpYN0xnOWtORXZkZWtvVVFNQThHbE16TktzeDlSWUt6bnBtZ1gxbWQzdDFQaDI5WXl1U0VKcDVwaTMvVVRCL1NCcURaSVU0CkZERStQYWdIbjN5TGc4RXpxelBFZkFqaXBuV1Q1NWpBREY5anhDZ3JpWVc4Z1dSaWZVMkRGSlNYNm8wVWp1STVoZ2JNbWsKOEF1djZvTU82M2pEU1Y1UDRMVFF3cTJnVjk5QlFONlduVjVVMjNxelpVREdnUzVob05Rd2lCMFRXamxEQkZVdjluWHdZRApqMGN6N1c5dXMvN25oSVBzSUJBQUFCQVFDMGRUT0FiUDh0KzVLUVZqa3daWjdjRWNDekRYUlI5TVJsL2d5TllkVEtWYTdkCmRNUVRlMDUyMG9MSG9PWG9vTXJsOVQ1NDZCeTcvL3diQW94NnJNU0xPNzQzQ0JsUGIzWWxPa28rL1ZTYzVxQ1QrNjVDUUYKazlkTUw1SUJaYUFIZUVTd1pEaVUyYnRPcExYSzkwUEVReEluSnlaVnFWMUJFd2Q2eW0wMlQ3OVFaOEN2bE45QkxjZWdWRQpRbFd2a3JxQ1hTSjhBTjRCby9zc2w0UFFLZythVkFiTXhYR0lBQlZEdlp4TkcvZkZDNFZBLzY4ODBlUXJxNDBvcVlZVVQrCm1WWDEzRUZ3a2YzZ29ndWl6cy9hd2gzL2wyclYvTFBodEJtV0F2ekF6VUlTcnlJZXJDa2o5RXFXNXRVUCt4Z1F1R09rQVQKN2IvWUgvT1VTelRqY0UyV0FBQUJBUURkUGpYWk5mU1FQSDNjQ3NrQWRyaDRjeU1SWW9pV0VhV29jNlNtNXplWFhqL25IRQo4WkJxRTVGdXg3NjhtbXdnUEQ3cUtIZVk4RDRIV1Q3UzNqNVFWM251U0c2ZkNPVHhaTEE5NXlRUittdzZid0l5TmhIM3pKCnM4Y1hWSTVrODdLeUtkNzB5SnNwSHFRdGFiSzJmZitQcHFpOWRIUGJyMnE5R3Q4UmFnY1cyNWh2cVA1STdwbUIxN211MkcKWDFhSnpmRDl1SnRxNkh0aVR5Rk03eUZsUEpLVDlMNGFkc2FvREJDdk9Wcmp0LzhRR3FMaUYvVmd3RWxDMk9RNnNJVmwwMwpua0hKUGx1MDVNV0NzTjZvTWgrbTQyZFJNSHd3eDFTS2hpMUkwOE5ySDVSQVA3ZXhVbUFNWkYwQ1VKZ1hYMjh4UnZocWNDCldkSjRKeGFHT2h1KzBCQUFBQkFRRFY1Nldva29TWUFISnY5bmhjd0tETlNTeVREZzAvWWs1MXhrWHRVRCtzKzBWL3NEckMKUDN5aktWQTNJREMxcFBrTm9WYVN3YnAvTG5qc2JYYXpHUWxFQnZTZno2RGo2N1NzUE5CWWx6cXRTY25IQTF0MXFHNEZ2OQpHZlh1Zy9VS3ZOTG40anJrSytpTW8wSFlpWXFzWjQ2MW1FVmJvMXFOWDFOd1hKY3ptVy85bTAwdnIwa1lHUHFvbDdHU0JFCmlPZVU3Sm41aHA0Yms3VnprU1gyUXBUL3o1NmVJK2cweDZoanM3VHdCRkdjRTBCZmRibmpQc3NKMlFmaHQ3QkIyYWNic2sKSC85d3pNeE80Tjg0VmVCN2FRVjMwbTBMN0ErVWVJbXFWV2ZEcnVFeTZjaVNHRDU3RERDYlVES3lBMEN6a29uTnpiWWJvZgpTNDA4Qnoxam4rSERBQUFBRkd0MWNtdHBiVEEyTmpGQVoyMWhhV3d1WTI5dEFRSURCQVVHCi0tLS0tRU5EIE9QRU5TU0ggUFJJVkFURSBLRVktLS0tLQo='

airflow:
  image:
    repository: apache/airflow
    tag: 2.5.3-python3.8
    pullPolicy: Always
    pullSecret: ""
    uid: 50000
    gid: 0
  executor: CeleryKubernetesExecutor
  # python3 -c "from cryptography.fernet import Fernet; FERNET_KEY = Fernet.generate_key().decode(); print(FERNET_KEY)"
  fernetKey: BhuZsGEcmhs3tyxLUD7F54sjB1rJ0R3MK104Hv7DKLA=
  users:
    - username: admin
      password: admin
      role: Admin
      email: admin@example.com
      firstName: admin
      lastName: admin
  connections:
    - id: my_postgres
      type: postgres
      description: my Postgres connection
      host: postgres.example.com
      port: 5432
      login: XXXXXXXX
      password: XXXXXXXX
      schema: my_database
      extra: |
        { 
          "sslmode": "allow" 
        }
  variables:
    - key: "environment"
      value: "dev"
  config:
    # Core
    AIRFLOW__CORE__DAGS_FOLDER: /usr/local/airflow/dags/src
    AIRFLOW__CORE__COLORED_CONSOLE_LOG: 'False'
    AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: 'False'
    AIRFLOW__CORE__LOAD_EXAMPLES: "False"

    # Webserver
    AIRFLOW__WEBSERVER__EXPOSE_CONFIG: 'False'
    AIRFLOW__WEBSERVER__AUTHENTICATE: 'True'
    AIRFLOW__WEBSERVER__HIDE_PAUSED_DAGS_BY_DEFAULT: 'True'
    AIRFLOW__WEBSERVER__AUTH_BACKEND: airflow.contrib.auth.backends.google_auth
    AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: 'True'

    # Google
    AIRFLOW__GOOGLE__OAUTH_CALLBACK_ROUTE: /oauth2callback
    AIRFLOW__GOOGLE__DOMAIN: yourcompany.com

    # Scheduler
    AIRFLOW__SCHEDULER__DAG_DIR_LIST_INTERVAL: "30"

    # Triggerer
    AIRFLOW__TRIGGERER__DEFAULT_CAPACITY: "1000"

    # Celery
    AIRFLOW__CELERY__WORKER_CONCURRENCY: "30"
  pools:
    - name: "pool_1"
      description: "pool_1"
      slots: 5
    - name: "pool_2"
      description: "pool_2"
      slots: 0
      policies:
        - name: "scale up at 7pm UTC"
          slots: 50
          recurrence: "0 19 * * *"
        - name: "scale down at 6pm UTC"
          slots: 10
          recurrence: "0 6 * * *"
  poolsUpdate: true
  clusterDomain: "cluster.local"
scheduler:
  resources:
    limits:
      cpu: "500m"
      memory: "1Gi"
    requests:
      cpu: "50m"
      memory: "128Mi"
  securityContext:
    fsGroup: 65534
    privileged: true

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - airflow-demo

web:
  initialDelaySeconds: '240'
  resources:
    limits:
      cpu: "800m"
      memory: "2Gi"
    requests:
      cpu: "50m"
      memory: "512Mi"
  securityContext:
    fsGroup: 65534
    privileged: true

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - airflow-demo

workers:
  replicas: 1
  resources:
    limits:
      cpu: "2000m"
      memory: "4Gi"
    requests:
      cpu: "1000m"
      memory: "1Gi"

  keda:
    enabled: true
    namespaceLabels: {}
    # How often KEDA polls the airflow DB to report new scale requests to the HPA
    pollingInterval: 5
    # How many seconds KEDA will wait before scaling to zero.
    # Note that HPA has a separate cooldown period for scale-downs
    cooldownPeriod: 30
    # Minimum number of workers created by keda
    minReplicaCount: 0
    # Maximum number of workers created by keda
    maxReplicaCount: 10

    # Specify HPA related options
    advanced:
      horizontalPodAutoscalerConfig:
        behavior:
          scaleDown:
            stabilizationWindowSeconds: 300
            policies:
              - type: Percent
                value: 100
                periodSeconds: 15
        # Query to use for KEDA autoscaling. Must return a single integer.

  persistence:
    # Enable persistent volumes
    enabled: true
    # Volume size for worker StatefulSet
    size: 1Gi
    # If using a custom storageClass, pass name ref to all statefulSets here
    storageClassName:
    # Execute init container to chown log directory.
    # This is currently only needed in kind, due to usage
    # of local-path provisioner.
    fixPermissions: false
    # Annotations to add to worker volumes
    annotations: {}
    # Detailed default security context for persistence for container level
    securityContexts:
      privileged: true
      container: {}

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - airflow-demo-m02
  securityContext:
    fsGroup: 65534
    privileged: true

###################################
## COMPONENT | Triggerer
###################################
triggerer:
  ## if the airflow triggerer should be deployed
  enabled: true

  ## the number of triggerer Pods to run
  replicas: 1

  ## resource requests/limits for the triggerer Pods
  ## [SPEC] https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  resources: {}
  persistence:
    # Enable persistent volumes
    enabled: true
    # Volume size for triggerer StatefulSet
    size: 10Gi
    # If using a custom storageClass, pass name ref to all statefulSets here
    storageClassName:
    # Execute init container to chown log directory.
    # This is currently only needed in kind, due to usage
    # of local-path provisioner.
    fixPermissions: false
    # Annotations to add to triggerer volumes
    annotations: {}
  ## maximum number of triggers each triggerer will run at once (sets `AIRFLOW__TRIGGERER__DEFAULT_CAPACITY`)
  # capacity: 1000
  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - airflow-demo-m03

###################################
## COMPONENT | Flower
###################################
flower:
  ## if the airflow flower UI should be deployed
  enabled: true

  ## resource requests/limits for the flower Pod
  ## [SPEC] https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  resources: {}

  ## configs for the Service of the flower Pods
  service:
    type: ClusterIP
    ports:
    ports:
      - name: flower-ui
        port: "{{ .Values.ports.flowerUI }}"

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - airflow-demo-m03

###################################
## CONFIG | Airflow Logs
###################################
logs:
  persistence:
    # Enable persistent volume for storing logs
    enabled: false
    # Volume size for logs
    size: 10Gi
    # Annotations for the logs PVC
    annotations: {}
    # If using a custom storageClass, pass name here
    storageClassName:
    ## the name of an existing PVC to use
    existingClaim:

###################################
## DATABASE | PgBouncer
###################################
pgbouncer:
  ## if the pgbouncer Deployment is created
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/database/pgbouncer.md
  enabled: true
  replicas: 1
  # Max number of old replicasets to retain
  revisionHistoryLimit: ~
  # Command to use for PgBouncer(templated).
  command: ["pgbouncer", "-u", "nobody", "/etc/pgbouncer/pgbouncer.ini"]
  # Args to use for PgBouncer(templated).
  args: ~
  
  ## resource requests/limits for the pgbouncer Pods
  ## [SPEC] https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.20/#resourcerequirements-v1-core
  resources: {}

  ## sets pgbouncer config: `auth_type`
  auth_type: md5
  auth_file: /etc/pgbouncer/users.txt


  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - airflow-demo-m03

###################################
## DATABASE | Embedded Postgres
###################################
postgresql:
  ## if the `stable/postgresql` chart is used
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/database/embedded-database.md
  ## [WARNING] the embedded Postgres is NOT SUITABLE for production deployments of Airflow
  ## [WARNING] consider using an external database with `externalDatabase.*`
  enabled: true

  ## configs for the PVC of postgresql
  persistence:
    enabled: true
    storageClass: ""
    size: 8Gi

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - airflow-demo-m03

###################################
## DATABASE | External Database
###################################
externalDatabase:
  ## the type of external database
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/database/external-database.md
  type: postgres

###################################
## DATABASE | Embedded Redis
###################################
redis:
  ## if the `stable/redis` chart is used
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/database/embedded-redis.md
  ## [WARNING] consider using an external database with `externalDatabase.*`
  enabled: true
  terminationGracePeriodSeconds: 600

  # Create ServiceAccount
  serviceAccount:
    # default value is true
    # ref: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
    automountServiceAccountToken: true
    # Specifies whether a ServiceAccount should be created
    create: true
    # The name of the ServiceAccount to use.
    # If not set and create is true, a name is generated using the release name
    name: ~

    # Annotations to add to worker kubernetes service account.
    annotations: {}

  persistence:
    # Enable persistent volumes
    enabled: true
    # Volume size for worker StatefulSet
    size: 10Gi
    # If using a custom storageClass, pass name ref to all statefulSets here
    storageClassName:
    # Annotations to add to redis volumes
    annotations: {}

  affinity:
    nodeAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        nodeSelectorTerms:
        - matchExpressions:
          - key: kubernetes.io/hostname
            operator: In
            values:
            - airflow-demo

###################################
## DATABASE | External Redis
###################################
externalRedis:
  ## the host of the external redis
  ## [FAQ] https://github.com/airflow-helm/charts/blob/main/charts/airflow/docs/faq/database/external-redis.md
  host: localhost

# All ports used by chart
ports:
  flowerUI: 5555
  airflowUI: 8080
  workerLogs: 8793
  triggererLogs: 8794
  redisDB: 6379
  statsdIngest: 9125
  statsdScrape: 9102
  pgbouncer: 6543
  pgbouncerScrape: 9127

createUserJob:
  useHelmHooks: false
  applyCustomEnv: false
migrateDatabaseJob:
  useHelmHooks: false
  applyCustomEnv: false